{"version":3,"file":"static/js/684.3fe3ae4c.chunk.js","mappings":"sKA6GA,UAvG0B,SAApBA,gBACJ,IAAMC,EAAyB,CAC7B,CACEC,MAAM,EACNC,MAAO,oBACPC,MACE,4BACE,cAAGC,UAAU,wCAAb,iKAIA,eAAGA,UAAU,mCAAb,iDACuC,KACrC,cACEC,KAAK,0DACLD,UAAU,mDAFZ,yBAKK,IAPP,2FAaN,CACEF,MAAO,mCACPC,MACE,4BACE,cAAGC,UAAU,wCAAb,qKAIA,eAAGA,UAAU,mCAAb,0BACgB,KACd,cAAGC,KAAK,8BAA8BD,UAAU,mDAAhD,iCAEK,IAJP,sFAUN,CACEF,MAAO,6DACPC,MACE,4BACE,cAAGC,UAAU,wCAAb,yRAKA,cAAGA,UAAU,wCAAb,qLAIA,cAAGA,UAAU,wCAAb,mDACA,gBAAIA,UAAU,kDAAd,WACE,yBACE,cAAGC,KAAK,4BAA4BD,UAAU,mDAA9C,6BAIF,yBACE,cACEC,KAAK,0BACLC,IAAI,WACJF,UAAU,mDAHZ,mCAcNG,EAA0B,CAC9B,CACEL,MAAO,oBACPM,MAAM,SAAC,KAAD,CAAWR,MAAOA,IACxBS,cAAe,qBAEjB,CACEP,MAAO,cACPM,MAAM,SAAC,KAAD,CAAWR,MAAOA,IACxBS,cAAe,qBAEjB,CACEP,MAAO,kBACPM,MAAM,SAAC,KAAD,CAAWR,MAAOA,EAAOU,OAAK,IACpCD,cAAe,qBAEjB,CACEP,MAAO,cACPM,MAAM,SAAC,KAAD,CAAWR,MAAOA,EAAOW,UAAWC,EAAAA,MAC1CH,cAAe,sBAInB,OAAO,SAAC,IAAD,CAAUF,SAAUA,M,6HClG7BM,EAAAA,EAAAA,iBAAmC,MAAOC,EAAAA,GAanC,IAAMC,EAA8B,SAA9BA,SAA+B,GAAkB,IAAhBR,EAAe,EAAfA,SAC5C,OACE,gBAAKH,UAAU,wDAAf,SACGG,EAASS,KAAI,WAAyDC,GAAzD,IAAGf,EAAH,EAAGA,MAAOM,EAAV,EAAUA,KAAMC,EAAhB,EAAgBA,cAAeS,EAA/B,EAA+BA,uBAA/B,OACZ,iBAAiBd,UAAU,sBAA3B,WACE,iBAAMA,UAAU,qBAAhB,SAAsCF,KACtC,UAAC,KAAD,CAAME,UAAWK,EAAjB,UACGD,GACD,SAAC,IAAD,CAAmBW,SAAS,MAAMC,MAAOC,EAAAA,EAAzC,UACGC,EAAAA,EAAAA,IAAwBd,GAAD,QACtBe,eAAe,EACfC,cAAe,uBAACC,GAAD,OAAQA,EAAGC,MAC1BC,WAAW,EACXC,2BAA2B,EAC3BC,wBAAwB,GACrBX,WAXDD","sources":["pages/AccordionPage.tsx","pages/DemoPage.tsx"],"sourcesContent":["import { FC } from 'react';\nimport { HiOutlineArrowCircleDown } from 'react-icons/hi';\n\nimport { Accordion, AccordionItem } from '../components';\nimport { CodeExample, DemoPage } from './DemoPage';\n\nconst AccordionPage: FC = () => {\n  const items: AccordionItem[] = [\n    {\n      open: true,\n      title: 'What is Flowbite?',\n      body: (\n        <div>\n          <p className=\"mb-2 text-gray-500 dark:text-gray-400\">\n            Flowbite is an open-source library of interactive components built on top of Tailwind CSS including buttons,\n            dropdowns, modals, navbars, and more.\n          </p>\n          <p className=\"text-gray-500 dark:text-gray-400\">\n            Check out this guide to learn how to{' '}\n            <a\n              href=\"https://flowbite.com/docs/getting-started/introduction/\"\n              className=\"text-blue-600 dark:text-blue-500 hover:underline\"\n            >\n              get started\n            </a>{' '}\n            and start developing websites even faster with components on top of Tailwind CSS.\n          </p>\n        </div>\n      ),\n    },\n    {\n      title: 'Is there a Figma file available?',\n      body: (\n        <div>\n          <p className=\"mb-2 text-gray-500 dark:text-gray-400\">\n            Flowbite is first conceptualized and designed using the Figma software so everything you see in the library\n            has a design equivalent in our Figma file.\n          </p>\n          <p className=\"text-gray-500 dark:text-gray-400\">\n            Check out the{' '}\n            <a href=\"https://flowbite.com/figma/\" className=\"text-blue-600 dark:text-blue-500 hover:underline\">\n              Figma design system\n            </a>{' '}\n            based on the utility classes from Tailwind CSS and components from Flowbite.\n          </p>\n        </div>\n      ),\n    },\n    {\n      title: 'What are the differences between Flowbite and Tailwind UI?',\n      body: (\n        <div>\n          <p className=\"mb-2 text-gray-500 dark:text-gray-400\">\n            The main difference is that the core components from Flowbite are open source under the MIT license, whereas\n            Tailwind UI is a paid product. Another difference is that Flowbite relies on smaller and standalone\n            components, whereas Tailwind UI offers sections of pages.\n          </p>\n          <p className=\"mb-2 text-gray-500 dark:text-gray-400\">\n            However, we actually recommend using both Flowbite, Flowbite Pro, and even Tailwind UI as there is no\n            technical reason stopping you from using the best of two worlds.\n          </p>\n          <p className=\"mb-2 text-gray-500 dark:text-gray-400\">Learn more about these technologies:</p>\n          <ul className=\"pl-5 list-disc text-gray-500 dark:text-gray-400\">\n            <li>\n              <a href=\"https://flowbite.com/pro/\" className=\"text-blue-600 dark:text-blue-500 hover:underline\">\n                Flowbite Pro\n              </a>\n            </li>\n            <li>\n              <a\n                href=\"https://tailwindui.com/\"\n                rel=\"nofollow\"\n                className=\"text-blue-600 dark:text-blue-500 hover:underline\"\n              >\n                Tailwind UI\n              </a>\n            </li>\n          </ul>\n        </div>\n      ),\n    },\n  ];\n\n  const examples: CodeExample[] = [\n    {\n      title: 'Default accordion',\n      code: <Accordion items={items} />,\n      codeClassName: 'dark:!bg-gray-900',\n    },\n    {\n      title: 'Always open',\n      code: <Accordion items={items} />,\n      codeClassName: 'dark:!bg-gray-900',\n    },\n    {\n      title: 'Flush accordion',\n      code: <Accordion items={items} flush />,\n      codeClassName: 'dark:!bg-gray-900',\n    },\n    {\n      title: 'Arrow style',\n      code: <Accordion items={items} arrowIcon={HiOutlineArrowCircleDown} />,\n      codeClassName: 'dark:!bg-gray-900',\n    },\n  ];\n\n  return <DemoPage examples={examples} />;\n};\n\nexport default AccordionPage;\n","import { FC, ReactNode } from 'react';\nimport reactElementToJSXString, { Options } from 'react-element-to-jsx-string';\nimport { PrismLight as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { dracula } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport tsx from 'react-syntax-highlighter/dist/esm/languages/prism/tsx';\n\nimport { Card } from '../components';\n\nSyntaxHighlighter.registerLanguage('tsx', tsx);\n\nexport type CodeExample = {\n  title: string;\n  code: ReactNode;\n  codeClassName?: string;\n  codeStringifierOptions?: Options;\n};\n\nexport type DemoPageProps = {\n  examples: CodeExample[];\n};\n\nexport const DemoPage: FC<DemoPageProps> = ({ examples }) => {\n  return (\n    <div className=\"flex flex-col max-w-4xl mx-auto gap-4 dark:text-white\">\n      {examples.map(({ title, code, codeClassName, codeStringifierOptions }, index) => (\n        <div key={index} className=\"flex flex-col gap-2\">\n          <span className=\"text-2xl font-bold\">{title}</span>\n          <Card className={codeClassName}>\n            {code}\n            <SyntaxHighlighter language=\"tsx\" style={dracula}>\n              {reactElementToJSXString(code, {\n                showFunctions: true,\n                functionValue: (fn) => fn.name,\n                sortProps: false,\n                useBooleanShorthandSyntax: false,\n                useFragmentShortSyntax: false,\n                ...codeStringifierOptions,\n              })}\n            </SyntaxHighlighter>\n          </Card>\n        </div>\n      ))}\n    </div>\n  );\n};\n"],"names":["AccordionPage","items","open","title","body","className","href","rel","examples","code","codeClassName","flush","arrowIcon","HiOutlineArrowCircleDown","SyntaxHighlighter","tsx","DemoPage","map","index","codeStringifierOptions","language","style","dracula","reactElementToJSXString","showFunctions","functionValue","fn","name","sortProps","useBooleanShorthandSyntax","useFragmentShortSyntax"],"sourceRoot":""}